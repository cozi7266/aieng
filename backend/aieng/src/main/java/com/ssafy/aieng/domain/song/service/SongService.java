package com.ssafy.aieng.domain.song.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ssafy.aieng.domain.mood.entity.Mood;
import com.ssafy.aieng.domain.mood.repository.MoodRepository;
import com.ssafy.aieng.domain.song.dto.request.SongGenerateRequestDto;
import com.ssafy.aieng.domain.song.dto.response.SongGenerateResponseDto;
import com.ssafy.aieng.domain.song.dto.response.SongResponseList;
import com.ssafy.aieng.domain.song.entity.Song;
import com.ssafy.aieng.domain.song.repository.SongRepository;
import com.ssafy.aieng.domain.voice.entity.Voice;
import com.ssafy.aieng.domain.voice.repository.VoiceRepository;
import com.ssafy.aieng.domain.book.entity.Storybook;
import com.ssafy.aieng.domain.book.repository.StorybookRepository;
import com.ssafy.aieng.domain.child.entity.Child;
import com.ssafy.aieng.domain.child.repository.ChildRepository;
import com.ssafy.aieng.domain.session.entity.Session;
import com.ssafy.aieng.domain.session.repository.SessionRepository;
import com.ssafy.aieng.global.error.ErrorCode;
import com.ssafy.aieng.global.error.exception.CustomException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.http.HttpHeaders;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.ssafy.aieng.domain.song.dto.response.SongDetailResponseDto;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;

@Slf4j
@Service
@RequiredArgsConstructor
public class SongService {

    private static final String FASTAPI_URL = "https://www.aieng.co.kr/fastapi/songs/";
    private final ObjectMapper objectMapper;

    private final SongRepository songRepository;
    private final VoiceRepository voiceRepository;
    private final MoodRepository moodRepository;
    private final ChildRepository childRepository;
    private final SessionRepository sessionRepository;
    private final StorybookRepository storybookRepository;
    private final StringRedisTemplate stringRedisTemplate;


    // ÎèôÏöî ÏÉùÏÑ±
    @Transactional
    public void generateSong(Integer userId, Integer childId, Integer sessionId, SongGenerateRequestDto requestDto) {
        // 1. ÏûêÎÖÄ ÏÜåÏú† Í≤ÄÏ¶ù
        Child child = childRepository.findById(childId)
                .orElseThrow(() -> new CustomException(ErrorCode.CHILD_NOT_FOUND));
        if (!child.getUser().getId().equals(userId)) {
            throw new CustomException(ErrorCode.UNAUTHORIZED_ACCESS);
        }

        // 2. ÏÑ∏ÏÖò Í≤ÄÏ¶ù
        Session session = sessionRepository.findById(sessionId)
                .orElseThrow(() -> new CustomException(ErrorCode.SESSION_NOT_FOUND));
        if (!session.getChild().getId().equals(childId)) {
            throw new CustomException(ErrorCode.INVALID_SESSION_ACCESS);
        }

        // 3. Mood Ï°∞Ìöå
        Mood mood = moodRepository.findById(requestDto.getMoodId())
                .orElseThrow(() -> new CustomException(ErrorCode.MOOD_NOT_FOUND));

        // 4. ÏûÖÎ†•Í∞í Í≤ÄÏ¶ù
        String voiceName = requestDto.getInputVoice();
        if (voiceName == null || voiceName.isBlank()) {
            throw new CustomException(ErrorCode.INTERNAL_SERVER_ERROR);
        }

        // 5. FastAPI ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ±
        Map<String, Object> fastApiRequest = Map.of(
                "userId", userId,
                "sessionId", sessionId,
                "moodName", mood.getName(),
                "voiceName", voiceName
        );

        try {
            ObjectMapper mapper = new ObjectMapper();
            String jsonPayload = mapper.writeValueAsString(fastApiRequest);
            log.info("üì§ FastAPI Ï†ÑÏÜ° Îç∞Ïù¥ÌÑ∞: {}", jsonPayload);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<String> entity = new HttpEntity<>(jsonPayload, headers);

            ResponseEntity<String> fastApiResponse = new RestTemplate().postForEntity(
                    FASTAPI_URL, entity, String.class
            );

            if (fastApiResponse.getStatusCode().isError()) {
                log.error("‚ùå FastAPI ÏùëÎãµ Ïã§Ìå®: status={}, body={}",
                        fastApiResponse.getStatusCodeValue(), fastApiResponse.getBody());
                throw new CustomException(ErrorCode.INTERNAL_SERVER_ERROR);
            }

            log.info("üéµ ÎèôÏöî ÏÉùÏÑ± ÏöîÏ≤≠ ÏÑ±Í≥µ");

        } catch (Exception e) {
            log.error("‚ùå ÎèôÏöî ÏÉùÏÑ± Ï§ë Ïò§Î•ò Î∞úÏÉù", e);
            throw new CustomException(ErrorCode.INTERNAL_SERVER_ERROR);
        }
    }


    // ÎèôÏöî Ï†ÄÏû•(Redis -> RDB)
    @Transactional
    public SongGenerateResponseDto getGeneratedSong(Integer userId, Integer childId, Integer sessionId, Integer storybookId) {
        // 1. ÏûêÎÖÄ Í≤ÄÏ¶ù
        Child child = childRepository.findById(childId)
                .orElseThrow(() -> new CustomException(ErrorCode.CHILD_NOT_FOUND));
        if (!child.getUser().getId().equals(userId)) {
            throw new CustomException(ErrorCode.UNAUTHORIZED_ACCESS);
        }

        // 2. ÏÑ∏ÏÖò Í≤ÄÏ¶ù
        Session session = sessionRepository.findById(sessionId)
                .orElseThrow(() -> new CustomException(ErrorCode.SESSION_NOT_FOUND));
        if (!session.getChild().getId().equals(childId)) {
            throw new CustomException(ErrorCode.INVALID_SESSION_ACCESS);
        }

        // 3. Storybook Í≤ÄÏ¶ù
        Storybook storybook = storybookRepository.findById(storybookId)
                .orElseThrow(() -> new CustomException(ErrorCode.STORYBOOK_NOT_FOUND));
        if (!storybook.getChild().getId().equals(childId)) {
            throw new CustomException(ErrorCode.INVALID_STORYBOOK_ACCESS);
        }

        // 4. Redis Í≤∞Í≥º Ï°∞Ìöå
        String redisKey = String.format("Song:user:%d:session:%d", userId, sessionId);
        String resultJson = stringRedisTemplate.opsForValue().get(redisKey);
        if (resultJson == null) {
            throw new CustomException(ErrorCode.RESOURCE_NOT_FOUND);
        }

        try {
            // 5. JSON ÌååÏã±
            JsonNode json = new ObjectMapper().readTree(resultJson);
            String lyricsEn = json.path("lyrics_en").asText(null);
            String lyricsKo = json.path("lyrics_ko").asText(null);
            String songUrl = json.path("song_url").asText(null);
            String moodName = json.path("mood").asText(null);
            String voiceName = json.path("voice").asText(null);

            // ÌïÑÏàò Í∞íÏù¥ ÌïòÎÇòÎùºÎèÑ ÏóÜÏúºÎ©¥ ÏòàÏô∏ Ï≤òÎ¶¨
            if (lyricsEn == null || lyricsKo == null || songUrl == null || moodName == null || voiceName == null) {
                throw new CustomException(ErrorCode.INTERNAL_SERVER_ERROR);
            }

            // 6. Voice Í∞ùÏ≤¥ Ï∞æÍ∏∞
            Voice voice = voiceRepository.findByName(voiceName)
                    .orElseThrow(() -> new CustomException(ErrorCode.VOICE_NOT_FOUND));

            // 7. Mood Í∞ùÏ≤¥ Ï∞æÍ∏∞
            Mood mood = moodRepository.findByName(moodName)
                    .orElseThrow(() -> new CustomException(ErrorCode.MOOD_NOT_FOUND));

            // 8. Song Ï†ÄÏû•
            Song song = Song.builder()
                    .storybook(storybook) // Storybook Í¥ÄÎ†® Ï†ïÎ≥¥ Ï∂îÍ∞Ä
                    .voice(voice)  // Voice Í∞ùÏ≤¥ Ìï†Îãπ
                    .mood(mood)  // Mood Í∞ùÏ≤¥ Ìï†Îãπ
                    .title("AI Generated Song")
                    .lyric(lyricsEn)
                    .description(lyricsKo)
                    .songUrl(songUrl)
                    .build();

            // 9. Song DBÏóê Ï†ÄÏû•
            songRepository.save(song);
            // ÏÑ∏ÏÖò ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            session.markSongDoneAndFinish();

            return SongGenerateResponseDto.of(song);

        } catch (JsonProcessingException e) {
            log.error("‚ùå RedisÏóêÏÑú ÎèôÏöî Í≤∞Í≥º ÌååÏã± Ïã§Ìå®", e);
            throw new CustomException(ErrorCode.INTERNAL_SERVER_ERROR);
        } catch (Exception e) {
            log.error("‚ùå ÎèôÏöî Ï†ÄÏû• Ïã§Ìå®", e);
            throw new CustomException(ErrorCode.INTERNAL_SERVER_ERROR);
        }
    }

    // ÎèôÏöî Î™©Î°ù Ï°∞Ìöå
    @Transactional(readOnly = true)
    public SongResponseList getSongsByChild(Integer userId, Integer childId) {
        // ÏûêÎÖÄ Í≤ÄÏ¶ù
        Child child = childRepository.findById(childId)
                .orElseThrow(() -> new CustomException(ErrorCode.CHILD_NOT_FOUND));
        if (!child.getUser().getId().equals(userId)) {
            throw new CustomException(ErrorCode.UNAUTHORIZED_ACCESS);
        }

        // ÎèôÏöî Î™©Î°ù Ï°∞Ìöå
        List<Song> songs = songRepository.findAllByStorybookChildIdOrderByCreatedAtDesc(childId);

        return SongResponseList.of(childId, songs);
    }

    // ÎèôÏöî ÏÉÅÏÑ∏ Ï°∞Ìöå
    @Transactional(readOnly = true)
    public SongDetailResponseDto getSongDetail(Integer userId, Integer childId, Integer songId) {
        // ÏûêÎÖÄ Í≤ÄÏ¶ù
        Child child = childRepository.findById(childId)
                .orElseThrow(() -> new CustomException(ErrorCode.CHILD_NOT_FOUND));
        if (!child.getUser().getId().equals(userId)) {
            throw new CustomException(ErrorCode.UNAUTHORIZED_ACCESS);
        }

        // ÎèôÏöî Ï°∞Ìöå
        Song song = songRepository.findById(songId)
                .orElseThrow(() -> new CustomException(ErrorCode.SONG_NOT_FOUND));
        if (!song.getStorybook().getChild().getId().equals(childId)) {
            throw new CustomException(ErrorCode.INVALID_STORYBOOK_ACCESS);
        }

        // Í∑∏Î¶ºÏ±Ö Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        Storybook storybook = song.getStorybook();

        return SongDetailResponseDto.from(song, storybook);
    }

    // ÎèôÏöî ÏÇ≠Ï†ú(Soft Delete)
    @Transactional
    public void deleteSong(Integer userId, Integer childId, Integer songId) {
        // ÏûêÎÖÄ Í≤ÄÏ¶ù
        Child child = childRepository.findById(childId)
                .orElseThrow(() -> new CustomException(ErrorCode.CHILD_NOT_FOUND));
        if (!child.getUser().getId().equals(userId)) {
            throw new CustomException(ErrorCode.UNAUTHORIZED_ACCESS);
        }

        // ÎèôÏöî Ï°∞Ìöå
        Song song = songRepository.findById(songId)
                .orElseThrow(() -> new CustomException(ErrorCode.SONG_NOT_FOUND));

        // ÏûêÎÖÄÏùò Í∑∏Î¶ºÏ±Ö ÏÜåÏú† Ïó¨Î∂Ä Í≤ÄÏ¶ù
        if (!song.getStorybook().getChild().getId().equals(childId)) {
            throw new CustomException(ErrorCode.INVALID_STORYBOOK_ACCESS);
        }

        // ÏÜåÌîÑÌä∏ ÎîúÎ¶¨Ìä∏ Ï≤òÎ¶¨
        song.softDelete();
    }





}